#+BEGIN_COMMENT
.. title: python ABC类
.. slug: python-abclei
.. date: 2019-04-15 18:10:46 UTC+08:00
.. tags: 
.. category: 
.. link: 
.. description: 
.. type: text
#+END_COMMENT

#+OPTIONS: \n:t

python的元类(metaclass)和虚基类（ABC）

{{{TEASER_END}}}

使用方法：
#+begin_src ipython :session pythonabc  :exports none
%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
#+end_src

#+RESULTS:
: # Out[1]:

#+begin_src ipython :session pythonabc :exports both :results raw drawer output


class a:
	def __init__(self, data):
		self.data = data

	def getd3(self):
		return self.data * 3


class MyMeta(type):
	def __new__(metaname, classname, baseclasses, attrs):
		print('New called with')
		print('metaname', metaname)
		print('classname', classname)
		print('baseclasses', baseclasses)
		print('attrs', attrs)
		attrs['getdata'] = a.__dict__['getd3']
		# attrs['getdata'] = a.getd3
		return type.__new__(metaname, classname, baseclasses, attrs)

	def __init__(classobject, classname, baseclasses, attrs):
		print('init called with')
		print('classobject', classobject)
		print('classname', classname)
		print('baseclasses', baseclasses) 
		print('attrs', attrs)

# py2 和py3对metaclass工作方式不也一样， 以下是py3写法
class Kls(metaclass=MyMeta):
	def __init__(self,data):
		self.data = data

	def printd(self):
		print(self.data)

ik = Kls('arun')
ik.printd()
print(ik.getdata())

#+END_src

#+RESULTS:
:results:
#+BEGIN_EXAMPLE
New called with
metaname <class '__main__.MyMeta'>
classname Kls
baseclasses ()
attrs {'__module__': '__main__', '__qualname__': 'Kls', '__init__': <function Kls.__init__ at 0x11a4cc7b8>, 'printd': <function Kls.printd at 0x11a4f7f28>}
init called with
classobject <class '__main__.Kls'>
classname Kls
baseclasses ()
attrs {'__module__': '__main__', '__qualname__': 'Kls', '__init__': <function Kls.__init__ at 0x11a4cc7b8>, 'printd': <function Kls.printd at 0x11a4f7f28>, 'getdata': <function a.getd3 at 0x11a4ccea0>}
arun
arunarunarun

#+END_EXAMPLE
:end:

#+BEGIN_SRC ipython :session pythonabc :exports both :results raw drawer
from abc import ABCMeta


# 构造元类
def with_metaclass(meta, *bases):
    # This requires a bit of explanation: the basic idea is to make a
    # dummy metaclass for one level of class instantiation that replaces
    # itself with the actual metaclass.  Because of internal type checks
    # we also need to make sure that we downgrade the custom metaclass
    # for one level to something closer to type (that's why __call__ and
    # __init__ comes back from type etc.).
    #
    # This has the advantage over six.with_metaclass in that it does not
    # introduce dummy classes into the final MRO.
    class metaclass(meta):
        __call__ = type.__call__
        __init__ = type.__init__
        def __new__(cls, name, this_bases, d):
            if this_bases is None:
                return type.__new__(cls, name, (), d)
            return meta(name, bases, d)

    return metaclass('temporary_class', None, {})


class MyList(with_metaclass(ABCMeta,  )):
    pass


MyList.register(list)

assert issubclass(list, MyList)
#+END_SRC

#+RESULTS:
:results:
# Out[38]:
:end:
#+BEGIN_SRC ipython :session pythonabc :exports both :results raw drawer output
from abc import ABC
import collections

print(type(1))

#+END_SRC

#+RESULTS:
:results:
#+BEGIN_EXAMPLE
<class 'int'>

#+END_EXAMPLE
:end:


#+BEGIN_SRC ipython :session pythonabc :exports both :results raw drawer output

print(collections.Set)

print(set.__class__)

print(set)

print(set.__doc__)

#+END_SRC

#+RESULTS:
:results:
#+BEGIN_EXAMPLE
<class 'collections.abc.Set'>
<class 'type'>
<class 'set'>
set() -> new empty set object
set(iterable) -> new set object

Build an unordered collection of unique elements.

#+END_EXAMPLE
:end:
